# Generated by Django 4.2.7 on 2025-10-13 16:29

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('email', models.EmailField(max_length=254, unique=True, validators=[django.core.validators.RegexValidator(message='Must be a valid Green University email (format: 123456789@student.green.edu.bd or 123456789@green.edu.bd)', regex='^\\d{9}@(student\\.)?green\\.edu\\.bd$')])),
                ('student_id', models.CharField(help_text='9-digit Green University student ID', max_length=9, unique=True, validators=[django.core.validators.RegexValidator(message='Student ID must be exactly 9 digits', regex='^\\d{9}$')])),
                ('department', models.CharField(choices=[('CSE', 'Computer Science & Engineering'), ('EEE', 'Electrical & Electronic Engineering'), ('CE', 'Civil Engineering'), ('ME', 'Mechanical Engineering'), ('BBA', 'Bachelor of Business Administration'), ('ENG', 'English'), ('LAW', 'Law'), ('ARCH', 'Architecture'), ('PHARM', 'Pharmacy'), ('TEX', 'Textile Engineering')], help_text='Your academic department', max_length=10)),
                ('batch', models.CharField(choices=[('Spring 2024', 'Spring 2024'), ('Fall 2023', 'Fall 2023'), ('Spring 2023', 'Spring 2023'), ('Fall 2022', 'Fall 2022'), ('Spring 2022', 'Spring 2022'), ('Fall 2021', 'Fall 2021'), ('Spring 2021', 'Spring 2021'), ('Fall 2020', 'Fall 2020')], help_text='Your admission batch', max_length=20)),
                ('phone_number', models.CharField(blank=True, max_length=15, validators=[django.core.validators.RegexValidator(message='Enter a valid Bangladeshi phone number', regex='^\\+?880\\d{10}$|^\\d{11}$')])),
                ('is_verified', models.BooleanField(default=False, help_text='Email verification status')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pics/')),
                ('bio', models.TextField(blank=True, max_length=500)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('last_active', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Green University Student',
                'verbose_name_plural': 'Green University Students',
                'db_table': 'auth_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='StudentVerification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('verification_code', models.CharField(max_length=6)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_used', models.BooleanField(default=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='verification', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'student_verification',
            },
        ),
    ]
